Pass
{
	Tags{"LightMode" = "LightweightForward"}
	${Tags}
	${Blending}
	${Culling}
	${ZTest}
	${ZWrite}
	
    HLSLPROGRAM
    // Required to compile gles 2.0 with standard srp library
    #pragma prefer_hlslcc gles
    #pragma vertex vert
    #pragma fragment frag
    #pragma multi_compile _ UNITY_SINGLE_PASS_STEREO STEREO_INSTANCING_ENABLE STEREO_MULTIVIEW_ENABLE
    #pragma multi_compile_fog
    #pragma shader_feature _SAMPLE_GI
    #pragma shader_feature _ _ALPHATEST_ON _ALPHABLEND_ON
    #pragma multi_compile_instancing

	#pragma vertex vert
    #pragma fragment frag

    // Lighting include is needed because of GI
    #include "LWRP/ShaderLibrary/Core.hlsl"
    #include "LWRP/ShaderLibrary/Lighting.hlsl"
    #include "CoreRP/ShaderLibrary/Color.hlsl"
    #include "LWRP/ShaderLibrary/InputSurface.hlsl"
    #include "ShaderGraphLibrary/Functions.hlsl"

    ${Defines}

    ${Graph}

    struct GraphVertexOutput
    {
        float4 position : POSITION;
        ${Interpolators}
        UNITY_VERTEX_INPUT_INSTANCE_ID
    };

    GraphVertexOutput vert (GraphVertexInput v)
	{
	    v = PopulateVertexData(v);
		
        GraphVertexOutput o = (GraphVertexOutput)0;
        
        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_TRANSFER_INSTANCE_ID(v, o);

        o.position = TransformObjectToHClip(v.vertex.xyz);
        ${VertexShader}
        return o;
	}

    half4 frag (GraphVertexOutput IN) : SV_Target
    {
        UNITY_SETUP_INSTANCE_ID(IN);

    	${LocalPixelShader}
    	
        SurfaceInputs surfaceInput = (SurfaceInputs)0;
        ${SurfaceInputs}

        SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
        float3 Color = float3(0.5, 0.5, 0.5);
        float Alpha = 1;
        float AlphaClipThreshold = 0;
		${SurfaceOutputRemap}
		
 #if _AlphaClip
        clip(Alpha - AlphaClipThreshold);
#endif
    	return half4(Color, Alpha);
    }
    ENDHLSL
}
